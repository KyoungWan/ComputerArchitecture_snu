#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
Test10:
	iaddq $-10, %rdx  #len 10
	jge Over10 #len >=10
Test3:
	iaddq $7, %rdx #len 1
	jge Over3 #3<= len <10
Test2:
	iaddq $2, %rdx #len
	je Exact1 #len==1
	jg Exact2
	ret #len ==0
Over10:
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos2:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos3:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos4:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos5		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos5:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos6		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos6:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos7		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos7:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos8		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos8:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos9		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos9:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos10		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos10:
	iaddq $8, %rsi
	jmp Test10
Over3:
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos11		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos11:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos12		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos12:	
	iaddq $8, %rsi
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos13		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos13:	
	iaddq $8, %rsi
	jmp Test10	
Exact2:
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos14		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos14:
	iaddq $8, %rsi
Exact1:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10
	jle Done
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
